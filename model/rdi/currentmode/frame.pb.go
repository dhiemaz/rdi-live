// Copyright 2019 Radiation Detection and Imaging (RDI), LLC
// Use of this source code is governed by the BSD 3-clause
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rdi/currentmode/frame.proto

package currentmode

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Frame is a repeated sequence of samples.  Each sample may or may not be for
// a complete set of detector channels.
type Frame struct {
	Timestamp   uint64                `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sample      []*Sample             `protobuf:"bytes,2,rep,name=sample,proto3" json:"sample,omitempty"`
	Offsets     map[uint64]*HpsSample `protobuf:"bytes,3,rep,name=offsets,proto3" json:"offsets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AxisOffsets []*AxisSample         `protobuf:"bytes,5,rep,name=axis_offsets,json=axisOffsets,proto3" json:"axis_offsets,omitempty"`
	// correlation coefficient between all axes
	Correlation          float32  `protobuf:"fixed32,4,opt,name=correlation,proto3" json:"correlation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Frame) Reset()         { *m = Frame{} }
func (m *Frame) String() string { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()    {}
func (*Frame) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c8349567168d5a, []int{0}
}

func (m *Frame) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Frame.Unmarshal(m, b)
}
func (m *Frame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Frame.Marshal(b, m, deterministic)
}
func (m *Frame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Frame.Merge(m, src)
}
func (m *Frame) XXX_Size() int {
	return xxx_messageInfo_Frame.Size(m)
}
func (m *Frame) XXX_DiscardUnknown() {
	xxx_messageInfo_Frame.DiscardUnknown(m)
}

var xxx_messageInfo_Frame proto.InternalMessageInfo

func (m *Frame) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Frame) GetSample() []*Sample {
	if m != nil {
		return m.Sample
	}
	return nil
}

func (m *Frame) GetOffsets() map[uint64]*HpsSample {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *Frame) GetAxisOffsets() []*AxisSample {
	if m != nil {
		return m.AxisOffsets
	}
	return nil
}

func (m *Frame) GetCorrelation() float32 {
	if m != nil {
		return m.Correlation
	}
	return 0
}

// Sample is a set of values corresponding to a set of channels that were
// sampled together.
type Sample struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// hps maps an HPS UID to a set of samples local to that HPS.  The 32 MSB
	// of the UID is a type identifier that is shared among all HPSs with the
	// same nominal configuration.  The 32 LSB of the UID is an identifier for
	// a particular HPS installation.
	Hps map[uint64]*HpsSample `protobuf:"bytes,2,rep,name=hps,proto3" json:"hps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// axis is filled once mapping is applied and the hps field is emptied.
	Axis                 []*AxisSample    `protobuf:"bytes,3,rep,name=axis,proto3" json:"axis,omitempty"`
	BeamInfo             *Sample_BeamInfo `protobuf:"bytes,4,opt,name=beam_info,json=beamInfo,proto3" json:"beam_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Sample) Reset()         { *m = Sample{} }
func (m *Sample) String() string { return proto.CompactTextString(m) }
func (*Sample) ProtoMessage()    {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c8349567168d5a, []int{1}
}

func (m *Sample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample.Unmarshal(m, b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return xxx_messageInfo_Sample.Size(m)
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Sample) GetHps() map[uint64]*HpsSample {
	if m != nil {
		return m.Hps
	}
	return nil
}

func (m *Sample) GetAxis() []*AxisSample {
	if m != nil {
		return m.Axis
	}
	return nil
}

func (m *Sample) GetBeamInfo() *Sample_BeamInfo {
	if m != nil {
		return m.BeamInfo
	}
	return nil
}

type Sample_BeamInfo struct {
	MeanXPos             float32  `protobuf:"fixed32,1,opt,name=mean_x_pos,json=meanXPos,proto3" json:"mean_x_pos,omitempty"`
	MeanYPos             float32  `protobuf:"fixed32,2,opt,name=mean_y_pos,json=meanYPos,proto3" json:"mean_y_pos,omitempty"`
	TotalCurrent         float32  `protobuf:"fixed32,3,opt,name=total_current,json=totalCurrent,proto3" json:"total_current,omitempty"`
	XVar                 float32  `protobuf:"fixed32,4,opt,name=x_var,json=xVar,proto3" json:"x_var,omitempty"`
	YVar                 float32  `protobuf:"fixed32,5,opt,name=y_var,json=yVar,proto3" json:"y_var,omitempty"`
	XYCov                float32  `protobuf:"fixed32,6,opt,name=x_y_cov,json=xYCov,proto3" json:"x_y_cov,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sample_BeamInfo) Reset()         { *m = Sample_BeamInfo{} }
func (m *Sample_BeamInfo) String() string { return proto.CompactTextString(m) }
func (*Sample_BeamInfo) ProtoMessage()    {}
func (*Sample_BeamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c8349567168d5a, []int{1, 1}
}

func (m *Sample_BeamInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sample_BeamInfo.Unmarshal(m, b)
}
func (m *Sample_BeamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sample_BeamInfo.Marshal(b, m, deterministic)
}
func (m *Sample_BeamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample_BeamInfo.Merge(m, src)
}
func (m *Sample_BeamInfo) XXX_Size() int {
	return xxx_messageInfo_Sample_BeamInfo.Size(m)
}
func (m *Sample_BeamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample_BeamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Sample_BeamInfo proto.InternalMessageInfo

func (m *Sample_BeamInfo) GetMeanXPos() float32 {
	if m != nil {
		return m.MeanXPos
	}
	return 0
}

func (m *Sample_BeamInfo) GetMeanYPos() float32 {
	if m != nil {
		return m.MeanYPos
	}
	return 0
}

func (m *Sample_BeamInfo) GetTotalCurrent() float32 {
	if m != nil {
		return m.TotalCurrent
	}
	return 0
}

func (m *Sample_BeamInfo) GetXVar() float32 {
	if m != nil {
		return m.XVar
	}
	return 0
}

func (m *Sample_BeamInfo) GetYVar() float32 {
	if m != nil {
		return m.YVar
	}
	return 0
}

func (m *Sample_BeamInfo) GetXYCov() float32 {
	if m != nil {
		return m.XYCov
	}
	return 0
}

// HpsSample represents at least a portion of the detector read out by a single
// HPS (Hard Processor System).
type HpsSample struct {
	// HPS-local channel samples
	Channel []int32 `protobuf:"zigzag32,1,rep,packed,name=channel,proto3" json:"channel,omitempty"`
	// sum of all channels
	Sum int64 `protobuf:"zigzag64,2,opt,name=sum,proto3" json:"sum,omitempty"`
	// optional representations
	FloatChannel []float32 `protobuf:"fixed32,3,rep,packed,name=float_channel,json=floatChannel,proto3" json:"float_channel,omitempty"`
	FixedChannel []int32   `protobuf:"fixed32,4,rep,packed,name=fixed_channel,json=fixedChannel,proto3" json:"fixed_channel,omitempty"`
	// sample number from FPGA
	SampleNumber         uint32   `protobuf:"varint,5,opt,name=sample_number,json=sampleNumber,proto3" json:"sample_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HpsSample) Reset()         { *m = HpsSample{} }
func (m *HpsSample) String() string { return proto.CompactTextString(m) }
func (*HpsSample) ProtoMessage()    {}
func (*HpsSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c8349567168d5a, []int{2}
}

func (m *HpsSample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HpsSample.Unmarshal(m, b)
}
func (m *HpsSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HpsSample.Marshal(b, m, deterministic)
}
func (m *HpsSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HpsSample.Merge(m, src)
}
func (m *HpsSample) XXX_Size() int {
	return xxx_messageInfo_HpsSample.Size(m)
}
func (m *HpsSample) XXX_DiscardUnknown() {
	xxx_messageInfo_HpsSample.DiscardUnknown(m)
}

var xxx_messageInfo_HpsSample proto.InternalMessageInfo

func (m *HpsSample) GetChannel() []int32 {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *HpsSample) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *HpsSample) GetFloatChannel() []float32 {
	if m != nil {
		return m.FloatChannel
	}
	return nil
}

func (m *HpsSample) GetFixedChannel() []int32 {
	if m != nil {
		return m.FixedChannel
	}
	return nil
}

func (m *HpsSample) GetSampleNumber() uint32 {
	if m != nil {
		return m.SampleNumber
	}
	return 0
}

// AxisSample represents a single detector axis for multi-dimensional,
// strip-like readout.
type AxisSample struct {
	// axis-local channel samples
	Channel []int32 `protobuf:"zigzag32,1,rep,packed,name=channel,proto3" json:"channel,omitempty"`
	// optional float representation
	FloatChannel []float32 `protobuf:"fixed32,2,rep,packed,name=float_channel,json=floatChannel,proto3" json:"float_channel,omitempty"`
	// sum of all channels
	Sum                  float32  `protobuf:"fixed32,3,opt,name=sum,proto3" json:"sum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AxisSample) Reset()         { *m = AxisSample{} }
func (m *AxisSample) String() string { return proto.CompactTextString(m) }
func (*AxisSample) ProtoMessage()    {}
func (*AxisSample) Descriptor() ([]byte, []int) {
	return fileDescriptor_24c8349567168d5a, []int{3}
}

func (m *AxisSample) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AxisSample.Unmarshal(m, b)
}
func (m *AxisSample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AxisSample.Marshal(b, m, deterministic)
}
func (m *AxisSample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AxisSample.Merge(m, src)
}
func (m *AxisSample) XXX_Size() int {
	return xxx_messageInfo_AxisSample.Size(m)
}
func (m *AxisSample) XXX_DiscardUnknown() {
	xxx_messageInfo_AxisSample.DiscardUnknown(m)
}

var xxx_messageInfo_AxisSample proto.InternalMessageInfo

func (m *AxisSample) GetChannel() []int32 {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *AxisSample) GetFloatChannel() []float32 {
	if m != nil {
		return m.FloatChannel
	}
	return nil
}

func (m *AxisSample) GetSum() float32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func init() {
	proto.RegisterType((*Frame)(nil), "rdi.currentmode.Frame")
	proto.RegisterMapType((map[uint64]*HpsSample)(nil), "rdi.currentmode.Frame.OffsetsEntry")
	proto.RegisterType((*Sample)(nil), "rdi.currentmode.Sample")
	proto.RegisterMapType((map[uint64]*HpsSample)(nil), "rdi.currentmode.Sample.HpsEntry")
	proto.RegisterType((*Sample_BeamInfo)(nil), "rdi.currentmode.Sample.BeamInfo")
	proto.RegisterType((*HpsSample)(nil), "rdi.currentmode.HpsSample")
	proto.RegisterType((*AxisSample)(nil), "rdi.currentmode.AxisSample")
}

func init() { proto.RegisterFile("proto/rdi/currentmode/frame.proto", fileDescriptor_24c8349567168d5a) }

var fileDescriptor_24c8349567168d5a = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x25, 0x49, 0xd3, 0x8f, 0xdb, 0x94, 0xd5, 0x11, 0x34, 0xd4, 0x7d, 0x88, 0xdd, 0x97, 0x3c,
	0xb5, 0x52, 0x5f, 0x44, 0x58, 0xc1, 0x2d, 0x8a, 0xbe, 0xa8, 0x8c, 0xb0, 0xb8, 0x82, 0x84, 0x69,
	0x3b, 0x61, 0x83, 0x49, 0x26, 0xcc, 0x4c, 0x4b, 0xf2, 0x87, 0x7c, 0xf3, 0xaf, 0xe8, 0x5f, 0x92,
	0xf9, 0x48, 0x5b, 0xac, 0xd6, 0x97, 0x7d, 0xbb, 0x3d, 0xf7, 0xdc, 0x7b, 0xce, 0x3d, 0xd3, 0x16,
	0x9e, 0x54, 0x9c, 0x49, 0x36, 0xe3, 0xeb, 0x6c, 0xb6, 0xda, 0x70, 0x4e, 0x4b, 0x59, 0xb0, 0x35,
	0x9d, 0xa5, 0x9c, 0x14, 0x74, 0xaa, 0x7b, 0xe8, 0x8c, 0xaf, 0xb3, 0xe9, 0x41, 0x73, 0xf2, 0xcb,
	0x05, 0xff, 0x8d, 0x22, 0xa0, 0x73, 0x18, 0xc8, 0xac, 0xa0, 0x42, 0x92, 0xa2, 0x0a, 0x9d, 0xc8,
	0x89, 0x3b, 0x78, 0x0f, 0xa0, 0x19, 0x74, 0x05, 0x29, 0xaa, 0x9c, 0x86, 0x6e, 0xe4, 0xc5, 0xc3,
	0xf9, 0xa3, 0xe9, 0x1f, 0x9b, 0xa6, 0x9f, 0x74, 0x1b, 0x5b, 0x1a, 0xba, 0x84, 0x1e, 0x4b, 0x53,
	0x41, 0xa5, 0x08, 0x3d, 0x3d, 0x71, 0x71, 0x34, 0xa1, 0x75, 0xa7, 0x1f, 0x0c, 0xeb, 0x75, 0x29,
	0x79, 0x83, 0xdb, 0x19, 0xf4, 0x12, 0x02, 0x52, 0x67, 0x22, 0x69, 0x77, 0xf8, 0x7a, 0xc7, 0xe3,
	0xa3, 0x1d, 0xaf, 0xea, 0x4c, 0x58, 0xe5, 0xa1, 0x1a, 0xb0, 0xdb, 0x50, 0x04, 0xc3, 0x15, 0xe3,
	0x9c, 0xe6, 0x44, 0x66, 0xac, 0x0c, 0x3b, 0x91, 0x13, 0xbb, 0xf8, 0x10, 0x1a, 0x5f, 0x43, 0x70,
	0x28, 0x8d, 0xee, 0x81, 0xf7, 0x8d, 0x36, 0xf6, 0x72, 0x55, 0xa2, 0xa7, 0xe0, 0x6f, 0x49, 0xbe,
	0x51, 0x27, 0x3b, 0xf1, 0x70, 0x3e, 0x3e, 0x12, 0x7f, 0x5b, 0xb5, 0xda, 0x86, 0xf8, 0xc2, 0x7d,
	0xee, 0x4c, 0x7e, 0x7a, 0xd0, 0x35, 0xe8, 0x7f, 0x22, 0x9d, 0x83, 0x77, 0x5b, 0x09, 0x9b, 0x67,
	0xf4, 0x8f, 0x3c, 0x95, 0x86, 0x89, 0x46, 0x91, 0xd1, 0x0c, 0x3a, 0xea, 0x4a, 0x1b, 0xe9, 0xc9,
	0x38, 0x34, 0x11, 0x5d, 0xc2, 0x60, 0x49, 0x49, 0x91, 0x64, 0x65, 0xca, 0x74, 0x0a, 0x27, 0xa4,
	0xae, 0x28, 0x29, 0xde, 0x95, 0x29, 0xc3, 0xfd, 0xa5, 0xad, 0xc6, 0x18, 0xfa, 0xad, 0x81, 0xbb,
	0x0a, 0x68, 0xfc, 0xc3, 0x81, 0x7e, 0x2b, 0x85, 0xce, 0x01, 0x0a, 0x4a, 0xca, 0xa4, 0x4e, 0x2a,
	0x26, 0xf4, 0x6e, 0x17, 0xf7, 0x15, 0xf2, 0xf9, 0x23, 0x13, 0xbb, 0x6e, 0xa3, 0xbb, 0xee, 0xbe,
	0x7b, 0xa3, 0xba, 0x17, 0x30, 0x92, 0x4c, 0x92, 0x3c, 0xb1, 0x92, 0xa1, 0xa7, 0x09, 0x81, 0x06,
	0x17, 0x06, 0x43, 0x0f, 0xc0, 0xaf, 0x93, 0x2d, 0xe1, 0xf6, 0x2b, 0xd0, 0xa9, 0xaf, 0x09, 0x57,
	0x60, 0xa3, 0x41, 0xdf, 0x80, 0x8d, 0x02, 0x1f, 0x42, 0xaf, 0x4e, 0x9a, 0x64, 0xc5, 0xb6, 0x61,
	0x57, 0xc3, 0x7e, 0x7d, 0xb3, 0x60, 0xdb, 0xc9, 0x77, 0x07, 0x06, 0xbb, 0x43, 0x50, 0x08, 0xbd,
	0xd5, 0x2d, 0x29, 0x4b, 0x9a, 0x87, 0x4e, 0xe4, 0xc5, 0xf7, 0x71, 0xfb, 0x51, 0xe5, 0x23, 0x36,
	0x85, 0x76, 0x89, 0xb0, 0x2a, 0x95, 0xc1, 0x34, 0x67, 0x44, 0x26, 0xed, 0x84, 0x7a, 0x36, 0x17,
	0x07, 0x1a, 0x5c, 0xd8, 0x31, 0x45, 0xca, 0x6a, 0xba, 0xde, 0x91, 0x3a, 0x91, 0x17, 0x9f, 0xe1,
	0x40, 0x83, 0x07, 0x24, 0xf3, 0xbb, 0x4a, 0xca, 0x4d, 0xb1, 0xa4, 0xc6, 0xf8, 0x08, 0x07, 0x06,
	0x7c, 0xaf, 0xb1, 0xc9, 0x57, 0x80, 0xfd, 0xfb, 0x9f, 0x30, 0x7a, 0x64, 0xcb, 0xfd, 0x8b, 0x2d,
	0x7b, 0x8d, 0x89, 0x54, 0x95, 0x57, 0xa3, 0x2f, 0xc3, 0x83, 0xb7, 0x5d, 0x76, 0xf5, 0x3f, 0xca,
	0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x01, 0x8c, 0x1e, 0x76, 0x04, 0x00, 0x00,
}
